* 说明
使用python3实现红黑树算法.

* 依赖
sudo pip3 install networkx matplotlib
sudo apt-get install python3-tk

* 特点
1. 使用cmd可以通过console,实时操作红黑树
2. 操作红黑树后,可以立刻绘制当前红黑树图形

* 不足
** DONE 不支持 节点的值 重复
   CLOSED: [2018-12-20 Thu 21:05]
** DONE 每次显示图片后,必须关闭才能显示下一张
   CLOSED: [2018-12-20 Thu 11:24]

* 算法说明
** 红黑树是自平衡二叉树的一种
** 红黑树特征
*** 1. 每个节点不是红色就是黑色
*** 2. 根节点总是黑色
*** 3. 所有叶子节点均为空的黑色节点,称之为 **哨兵节点**.
*** 4. 红色节点的子节点必须是黑色节点
*** 5. 从根节点到所有叶子节点,所经过的黑色节点数一致(即相同的黑色高度)

** 删除再平衡 说明
*** 总结:
    1. 先看待删除的节点的颜色
    2. 再看兄弟节点的颜色
    3. 再看侄子节点的颜色
      3.1 侄子节点先看远侄子
      3.2 再看近侄子
    4. 最后看父亲节点的颜色
*** 主要考虑是否影响性质4和5
*** 实际删除节点要么一个哨兵节点,要么两个哨兵节点.
** 删除再平衡 分类
*** Case 1: 删除节点为红色,则子节点必为哨兵节点.为什么?
    1. 直接删除即可
*** Case 2: 删除节点为黑色
**** Case 2.1: 有一个哨兵节点.
     1. 子节点必为红色节点+哨兵节点.为什么?
     2. 用子节点替代删除节点,再将子节点涂黑即可.
**** Case 2.2: 有两个哨兵节点.
     1. 很明显,删除后会和兄弟二叉树的黑色高度不一致
***** Case 2.2.1: 兄弟节点为红色
     1. 父节点必为黑色,侄子节点必为黑色叶子节点.
     2. 父节点和兄弟节点交换颜色,父节点向删除节点旋转.
     3. 转为兄弟节点为Case 2.2.2,即兄弟节点为黑色的情况
***** Case 2.2.2: 兄弟节点为黑色
****** Case 2.2.2.1: 远侄子为红色
      1. 父节点和兄弟节点颜色互换
      2. 父节点向删除节点旋转
      3. 远侄子涂黑.
****** Case 2.2.2.2: 近侄子为红色,远侄子为黑色
      1. 兄弟节点和近侄子颜色互换
      2. 兄弟向远离删除节点旋转
      3. 转为Case 2.2.2.1
****** Case 2.2.2.3: 兄弟节点和侄子节点均为黑色
******* Case 2.2.2.3.1: 父节点为红色
       1. 父节点和兄弟节点交换颜色
       2. 删除目标节点
******* Case 2.2.2.3.2: 父节点为黑色
       1. 兄弟节点改为红色
       2. 删除目标节点
       3. 以父节点为新的目标节点,回到Case 2.2,再次平衡.

* 参考链接
** 介绍
https://www.cnblogs.com/skywang12345/p/3245399.html
** 删除再平衡
https://www.cnblogs.com/qingergege/p/7351659.html
** Python源码实现
https://blog.csdn.net/z649431508/article/details/78034751
